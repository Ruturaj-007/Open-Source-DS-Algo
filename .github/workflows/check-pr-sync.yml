name: Check PR Sync Status

on:
  pull_request_target:
    types: [opened, synchronize, reopened]

permissions:
  pull-requests: write
  contents: read
  issues: write

jobs:
  check-sync:
    runs-on: ubuntu-latest
    name: Check if PR is behind main branch
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      
      - name: Fetch main branch
        run: |
          git fetch origin main:main
      
      - name: Check if branch is behind main
        id: check-behind
        run: |
          # Get the merge base between the PR branch and main
          MERGE_BASE=$(git merge-base HEAD main)
          
          # Get the latest commit on main
          MAIN_HEAD=$(git rev-parse main)
          
          # Check if main has commits that this branch doesn't have
          if [ "$MERGE_BASE" != "$MAIN_HEAD" ]; then
            echo "behind=true" >> $GITHUB_OUTPUT
            
            # Count how many commits behind
            COMMITS_BEHIND=$(git rev-list --count HEAD..main)
            echo "commits_behind=$COMMITS_BEHIND" >> $GITHUB_OUTPUT
          else
            echo "behind=false" >> $GITHUB_OUTPUT
            echo "commits_behind=0" >> $GITHUB_OUTPUT
          fi
      
      - name: Post comment if behind
        if: steps.check-behind.outputs.behind == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commitsCount = '${{ steps.check-behind.outputs.commits_behind }}';
            const username = context.payload.pull_request.user.login;
            
            const comment = `Hi @${username}, thank you for this pull request! üëã
            
            Our automated check has detected that your branch is **${commitsCount} commit(s) behind** our \`main\` branch. This can lead to merge conflicts and may cause issues during the review process.
            
            ### üîÑ How to fix this:
            
            To sync your fork and merge the latest changes from \`main\` into your branch, please follow these steps:
            
            #### Option 1: Using GitHub UI (Easiest)
            1. Go to your fork on GitHub
            2. Click on "Sync fork" button
            3. Click "Update branch"
            4. Then run in your local terminal:
               \`\`\`bash
               git checkout main
               git pull origin main
               git checkout ${context.payload.pull_request.head.ref}
               git merge main
               git push origin ${context.payload.pull_request.head.ref}
               \`\`\`
            
            #### Option 2: Using Git Commands
            \`\`\`bash
            # Add upstream remote (if you haven't already)
            git remote add upstream https://github.com/${context.payload.repository.full_name}.git
            
            # Fetch latest changes from upstream
            git fetch upstream
            
            # Checkout your branch
            git checkout ${context.payload.pull_request.head.ref}
            
            # Merge the latest changes from upstream/main
            git merge upstream/main
            
            # Push the updated branch
            git push origin ${context.payload.pull_request.head.ref}
            \`\`\`
            
            üìö **Need help?** Check out this guide: [How to Sync Your Fork](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/syncing-a-fork)
            
            Once your branch is updated, any merge conflicts will need to be resolved. Feel free to ask if you have any questions! üí°`;
            
            try {
              // Check if we've already posted this comment
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
              });
              
              const botComment = comments.find(comment => 
                comment.user.type === 'Bot' && 
                comment.body.includes('automated check has detected that your branch is')
              );
              
              if (botComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: comment
                });
                console.log('‚úÖ Updated existing comment');
              } else {
                // Post new comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                  body: comment
                });
                console.log('‚úÖ Posted new comment');
              }
            } catch (error) {
              console.log('‚ö†Ô∏è Could not post comment (this is expected for PRs from forks)');
              console.log('The PR is still detected as behind by ${commitsCount} commit(s)');
              core.setFailed('PR is ${commitsCount} commit(s) behind main. Please sync your fork.');
            }
      
      - name: Log sync status
        run: |
          if [ "${{ steps.check-behind.outputs.behind }}" == "true" ]; then
            echo "‚úã PR is ${{ steps.check-behind.outputs.commits_behind }} commit(s) behind main - Comment posted"
          else
            echo "‚úÖ PR is up-to-date with main - No action needed"
          fi
